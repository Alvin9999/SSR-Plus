#!/bin/bash
# üöÄ SSR-Plus Docker ÁÆ°ÁêÜËÑöÊú¨
# ÊîØÊåÅÈ´òÁâàÊú¨Á≥ªÁªü Debian/Ubuntu
# ÁâàÊú¨Âè∑: v1.1.2

stty erase ^H   # ËÆ©ÈÄÄÊ†ºÈîÆÂú®ÁªàÁ´ØÈáåÊ≠£Â∏∏Â∑•‰Ωú

DOCKER_IMAGE="yinqishuo/ssr:0.01"
CONTAINER_NAME="ssr"
CONFIG_PATH="/etc/shadowsocks-r/config.json"

# ========== Ê†∑Âºè ==========
RED='\e[31m'
GREEN='\e[32m'
YELLOW='\e[33m'
BLUE='\e[34m'
CYAN='\e[36m'
NC='\e[0m' # No Color

INDENT=" "   # Áº©Ëøõ 1 Ê†º
VERSION="v1.1.2"

# ========== Á≥ªÁªüÊ£ÄÊµã ==========
detect_os() {
  if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
  else
    OS=$(uname -s)
  fi
}

# ========== Docker ÂÆâË£Ö ==========
install_docker() {
  detect_os
  echo -e "${BLUE}${INDENT}[1/4] ÂÆâË£Ö Docker... Á≥ªÁªü: $OS${NC}"

  case "$OS" in
    ubuntu|debian)
      apt-get update -y
      apt-get install -y ca-certificates curl gnupg lsb-release
      mkdir -p /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/$OS/gpg | gpg --dearmor --yes -o /etc/apt/keyrings/docker.gpg
      echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/$OS \
        $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      apt-get update -y
      apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
      ;;
    centos|rhel)
      yum install -y yum-utils device-mapper-persistent-data lvm2 || {
        echo -e "${RED}${INDENT}‚ùå yum-utils ÂÆâË£ÖÂ§±Ë¥•ÔºåËØ∑ÂÖàÊ∏ÖÁêÜÁºìÂ≠òÂêéÂÜçËøêË°å:${NC}"
        echo -e "${YELLOW}${INDENT}ÊâßË°å: yum clean all && rm -rf /var/cache/yum${NC}"
        exit 1
      }
      yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      yum install -y docker-ce docker-ce-cli containerd.io || {
        echo -e "${RED}${INDENT}‚ùå Docker ÂÆâË£ÖÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúÊàñÊ∏ÖÁêÜ yum ÁºìÂ≠òÂêéÈáçËØï${NC}"
        exit 1
      }
      ;;
    rocky|almalinux)
      dnf install -y dnf-plugins-core
      dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      dnf install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
      ;;
    fedora)
      dnf install -y dnf-plugins-core
      dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
      dnf install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
      ;;
    opensuse*|sles)
      zypper install -y docker docker-runc
      ;;
    *)
      echo -e "${RED}${INDENT}‚ö†Ô∏è Êú™Áü•Á≥ªÁªüÔºåËØ∑ÊâãÂä®ÂÆâË£Ö Docker${NC}"
      exit 1
      ;;
  esac

  # È™åËØÅ Docker ÊòØÂê¶ÂÆâË£ÖÊàêÂäü
  if ! command -v docker >/dev/null 2>&1; then
    echo -e "${RED}${INDENT}‚ùå Docker Êú™ÂÆâË£ÖÊàêÂäüÔºåËØ∑ÊâãÂä®Ê£ÄÊü•Á≥ªÁªüÁéØÂ¢É${NC}"
    exit 1
  fi

  systemctl enable docker
  systemctl start docker
}

# ========== SSR Áä∂ÊÄÅÊ£ÄÊµã ==========
check_ssr_status() {
  if ! command -v docker >/dev/null 2>&1; then
    SSR_STATUS="${RED}Êú™ÂÆâË£Ö (Docker Êú™ÂÆâË£Ö)${NC}"
    return
  fi

  if ! docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}\$"; then
    SSR_STATUS="${RED}Êú™ÂÆâË£Ö${NC}"
  else
    if docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}\$"; then
      if docker exec $CONTAINER_NAME pgrep -f "server.py" >/dev/null 2>&1; then
        SSR_STATUS="${GREEN}Â∑≤ÂêØÂä®${NC}"
      else
        SSR_STATUS="${YELLOW}Â∑≤ÂÅúÊ≠¢${NC}"
      fi
    else
      SSR_STATUS="${YELLOW}Â∑≤ÂÅúÊ≠¢${NC}"
    fi
  fi
}

# ========== BBR Ê£ÄÊµã ==========
check_bbr() {
  local cc=$(sysctl -n net.ipv4.tcp_congestion_control 2>/dev/null)
  local qdisc=$(sysctl -n net.core.default_qdisc 2>/dev/null)

  if [[ "$cc" == "bbr" && "$qdisc" == "fq" ]]; then
    BBR_STATUS="${GREEN}Â∑≤ÂêØÁî® BBR${NC}"
  else
    BBR_STATUS="${RED}Êú™ÂêØÁî® BBR${NC}"
  fi
}

# ========== ËèúÂçïÈÄâÊã© ==========
choose_method() {
  echo -e "\n${CYAN}${INDENT}ËØ∑ÈÄâÊã©Âä†ÂØÜÊñπÂºè:${NC}"
  echo "${INDENT}1) none"
  echo "${INDENT}2) rc4"
  echo "${INDENT}3) rc4-md5"
  echo "${INDENT}4) rc4-md5-6"
  echo "${INDENT}5) aes-128-ctr"
  echo "${INDENT}6) aes-192-ctr"
  echo "${INDENT}7) aes-256-ctr"
  echo "${INDENT}8) aes-128-cfb"
  echo "${INDENT}9) aes-192-cfb"
  echo "${INDENT}10) aes-256-cfb"
  echo "${INDENT}11) aes-128-cfb8"
  echo "${INDENT}12) aes-192-cfb8"
  echo "${INDENT}13) aes-256-cfb8"
  echo "${INDENT}14) salsa20"
  echo "${INDENT}15) chacha20"
  echo "${INDENT}16) chacha20-ietf"
  read -p "${INDENT}ËæìÂÖ•Â∫èÂè∑ [ÈªòËÆ§16]: " method
  case $method in
    1) METHOD="none" ;;
    2) METHOD="rc4" ;;
    3) METHOD="rc4-md5" ;;
    4) METHOD="rc4-md5-6" ;;
    5) METHOD="aes-128-ctr" ;;
    6) METHOD="aes-192-ctr" ;;
    7) METHOD="aes-256-ctr" ;;
    8) METHOD="aes-128-cfb" ;;
    9) METHOD="aes-192-cfb" ;;
    10) METHOD="aes-256-cfb" ;;
    11) METHOD="aes-128-cfb8" ;;
    12) METHOD="aes-192-cfb8" ;;
    13) METHOD="aes-256-cfb8" ;;
    14) METHOD="salsa20" ;;
    15) METHOD="chacha20" ;;
    16|"") METHOD="chacha20-ietf" ;;
    *) METHOD="chacha20-ietf" ;;
  esac
}

choose_protocol() {
  echo -e "\n${CYAN}${INDENT}ËØ∑ÈÄâÊã©ÂçèËÆÆ (protocol):${NC}"
  echo "${INDENT}1) origin"
  echo "${INDENT}2) auth_sha1_v4"
  echo "${INDENT}3) auth_aes128_md5"
  echo "${INDENT}4) auth_aes128_sha1"
  echo "${INDENT}5) auth_chain_a"
  echo "${INDENT}6) auth_chain_b"
  read -p "${INDENT}ËæìÂÖ•Â∫èÂè∑ [ÈªòËÆ§2]: " protocol
  case $protocol in
    1) PROTOCOL="origin" ;;
    2|"") PROTOCOL="auth_sha1_v4" ;;
    3) PROTOCOL="auth_aes128_md5" ;;
    4) PROTOCOL="auth_aes128_sha1" ;;
    5) PROTOCOL="auth_chain_a" ;;
    6) PROTOCOL="auth_chain_b" ;;
    *) PROTOCOL="auth_sha1_v4" ;;
  esac
}

choose_obfs() {
  echo -e "\n${CYAN}${INDENT}ËØ∑ÈÄâÊã©Ê∑∑Ê∑Ü (obfs):${NC}"
  echo "${INDENT}1) plain"
  echo "${INDENT}2) http_simple"
  echo "${INDENT}3) http_post"
  echo "${INDENT}4) random_head"
  echo "${INDENT}5) tls1.2_ticket_auth"
  read -p "${INDENT}ËæìÂÖ•Â∫èÂè∑ [ÈªòËÆ§1]: " obfs
  case $obfs in
    1|"") OBFS="plain" ;;
    2) OBFS="http_simple" ;;
    3) OBFS="http_post" ;;
    4) OBFS="random_head" ;;
    5) OBFS="tls1.2_ticket_auth" ;;
    *) OBFS="plain" ;;
  esac
}

# ========== ÈÖçÁΩÆ ==========
set_config() {
  docker exec -i $CONTAINER_NAME bash -c "cat > $CONFIG_PATH" <<EOF
{
  "server":"0.0.0.0",
  "server_ipv6":"::",
  "server_port":${PORT},
  "local_address":"127.0.0.1",
  "local_port":1080,
  "password":"${PASSWORD}",
  "timeout":120,
  "method":"${METHOD}",
  "protocol":"${PROTOCOL}",
  "protocol_param":"",
  "obfs":"${OBFS}",
  "obfs_param":"",
  "redirect":"",
  "dns_ipv6":false,
  "fast_open":false,
  "workers":1
}
EOF
}

generate_ssr_link() {
  local ip=$(curl -s ifconfig.me)
  local pass_b64=$(echo -n "${PASSWORD}" | base64 -w0)
  local raw="${ip}:${PORT}:${PROTOCOL}:${METHOD}:${OBFS}:${pass_b64}/"
  local link="ssr://$(echo -n "$raw" | base64 -w0)"
  echo -e "\n${GREEN}${INDENT}SSR ÈìæÊé•:${NC}\n${INDENT}$link\n"
}

show_config() {
  if ! docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}\$"; then
    echo -e "${RED}${INDENT}Êú™Ê£ÄÊµãÂà∞ SSR ÂÆπÂô®${NC}"
    return
  fi

  local cfg=$(docker exec -i $CONTAINER_NAME cat $CONFIG_PATH 2>/dev/null)
  local ip=$(curl -s ifconfig.me)

  PORT=$(echo "$cfg" | grep '"server_port"' | awk -F ':' '{print $2}' | tr -d ' ,')
  PASSWORD=$(echo "$cfg" | grep '"password"' | awk -F '"' '{print $4}')
  METHOD=$(echo "$cfg" | grep '"method"' | awk -F '"' '{print $4}')
  PROTOCOL=$(echo "$cfg" | grep '"protocol"' | awk -F '"' '{print $4}')
  OBFS=$(echo "$cfg" | grep '"obfs"' | awk -F '"' '{print $4}')

  echo -e "${CYAN}${INDENT}===== ÂΩìÂâç SSR ÈÖçÁΩÆ =====${NC}"
  echo -e "${INDENT}üåê ÊúçÂä°Âô®   : ${YELLOW}$ip${NC}"
  echo -e "${INDENT}üîå Á´ØÂè£     : ${YELLOW}$PORT${NC}"
  echo -e "${INDENT}üîë ÂØÜÁ†Å     : ${YELLOW}$PASSWORD${NC}"
  echo -e "${INDENT}üîí Âä†ÂØÜÊñπÂºè : ${YELLOW}$METHOD${NC}"
  echo -e "${INDENT}üìú ÂçèËÆÆ     : ${YELLOW}$PROTOCOL${NC}"
  echo -e "${INDENT}üé≠ Ê∑∑Ê∑Ü     : ${YELLOW}$OBFS${NC}"
  echo -e "${CYAN}${INDENT}=========================${NC}"
  generate_ssr_link
}

# ========== ÂäüËÉΩ ==========
install_ssr() {
  echo -e "${BLUE}${INDENT}ÂÆâË£Ö SSR...${NC}"
  read -p "${INDENT}ËØ∑ËæìÂÖ•Á´ØÂè£ [ÈªòËÆ§20000]: " PORT
  PORT=${PORT:-20000}
  read -p "${INDENT}ËØ∑ËæìÂÖ•ÂØÜÁ†Å [ÈªòËÆ§dongtaiwang.com]: " PASSWORD
  PASSWORD=${PASSWORD:-dongtaiwang.com}
  choose_method
  choose_protocol
  choose_obfs

  install_docker

  docker pull $DOCKER_IMAGE
  docker stop $CONTAINER_NAME >/dev/null 2>&1
  docker rm $CONTAINER_NAME >/dev/null 2>&1
  docker run -dit --name $CONTAINER_NAME -p ${PORT}:${PORT} $DOCKER_IMAGE

  set_config
  docker exec -d $CONTAINER_NAME python /usr/local/shadowsocks/server.py -c $CONFIG_PATH -d start
  echo -e "${GREEN}${INDENT}‚úÖ SSR ÂÆâË£ÖÂÆåÊàê${NC}"
  show_config
}

change_config() {
  echo -e "${BLUE}${INDENT}‰øÆÊîπ SSR ÈÖçÁΩÆ...${NC}"
  local cfg=$(docker exec -i $CONTAINER_NAME cat $CONFIG_PATH 2>/dev/null)
  PORT=$(echo "$cfg" | grep '"server_port"' | awk -F ':' '{print $2}' | tr -d ' ,')
  PASSWORD=$(echo "$cfg" | grep '"password"' | awk -F '"' '{print $4}')

  read -p "${INDENT}Êñ∞Á´ØÂè£ (ÂõûËΩ¶‰øùÁïô: ${PORT}): " NEW_PORT
  read -p "${INDENT}Êñ∞ÂØÜÁ†Å (ÂõûËΩ¶‰øùÁïô: ${PASSWORD}): " NEW_PASSWORD
  choose_method
  choose_protocol
  choose_obfs

  NEW_PORT=${NEW_PORT:-$PORT}
  PASSWORD=${NEW_PASSWORD:-$PASSWORD}

  if [ "$NEW_PORT" != "$PORT" ]; then
    echo -e "${YELLOW}${INDENT}Á´ØÂè£ÊîπÂèòÔºåÈáçÊñ∞ÂàõÂª∫ÂÆπÂô®...${NC}"
    docker stop $CONTAINER_NAME >/dev/null 2>&1
    docker rm $CONTAINER_NAME >/dev/null 2>&1
    docker run -dit --name $CONTAINER_NAME -p ${NEW_PORT}:${NEW_PORT} $DOCKER_IMAGE
  fi

  PORT=$NEW_PORT
  set_config
  docker exec -d $CONTAINER_NAME python /usr/local/shadowsocks/server.py -c $CONFIG_PATH -d restart
  echo -e "${GREEN}${INDENT}‚úÖ ÈÖçÁΩÆ‰øÆÊîπÂÆåÊàê${NC}"
  show_config
}

start_ssr() {
  docker exec -d $CONTAINER_NAME python /usr/local/shadowsocks/server.py -c $CONFIG_PATH -d start
  echo -e "${GREEN}${INDENT}‚úÖ SSR Â∑≤ÂêØÂä®${NC}"
}

stop_ssr() {
  docker exec -d $CONTAINER_NAME python /usr/local/shadowsocks/server.py -c $CONFIG_PATH -d stop
  echo -e "${YELLOW}${INDENT}üõë SSR Â∑≤ÂÅúÊ≠¢${NC}"
}

restart_ssr() {
  docker exec -d $CONTAINER_NAME python /usr/local/shadowsocks/server.py -c $CONFIG_PATH -d restart
  echo -e "${GREEN}${INDENT}üîÑ SSR Â∑≤ÈáçÂêØ${NC}"
}

uninstall_ssr() {
  echo -e "${RED}${INDENT}Âç∏ËΩΩ SSR...${NC}"
  docker stop $CONTAINER_NAME >/dev/null 2>&1
  docker rm $CONTAINER_NAME >/dev/null 2>&1
  docker rmi $DOCKER_IMAGE >/dev/null 2>&1
  rm -f $CONFIG_PATH
  echo -e "${RED}${INDENT}‚úÖ SSR Â∑≤Âç∏ËΩΩÂÆåÊàê${NC}"
}

# ========== Á≥ªÁªüÂä†ÈÄü ==========
optimize_system() {
  echo -e "${BLUE}${INDENT}Ê£ÄÊü•Á≥ªÁªüÂä†ÈÄüÁä∂ÊÄÅ...${NC}"
  local cc=$(sysctl -n net.ipv4.tcp_congestion_control 2>/dev/null)
  local qdisc=$(sysctl -n net.core.default_qdisc 2>/dev/null)

  if [[ "$cc" == "bbr" && "$qdisc" == "fq" ]]; then
    echo -e "${GREEN}${INDENT}‚úÖ Á≥ªÁªüÂä†ÈÄüÂ∑≤ÂêØÁî® (BBR + TFO)${NC}"
  else
    echo -e "${YELLOW}${INDENT}Ê≠£Âú®ÂêØÁî® TCP Fast Open + BBR...${NC}"
    {
      echo "net.ipv4.tcp_fastopen = 3"
      echo "net.core.default_qdisc = fq"
      echo "net.ipv4.tcp_congestion_control = bbr"
    } >> /etc/sysctl.conf

    sysctl -p >/dev/null 2>&1
    cc=$(sysctl -n net.ipv4.tcp_congestion_control 2>/dev/null)
    qdisc=$(sysctl -n net.core.default_qdisc 2>/dev/null)

    if [[ "$cc" == "bbr" && "$qdisc" == "fq" ]]; then
      echo -e "${GREEN}${INDENT}‚úÖ Á≥ªÁªüÂä†ÈÄüÂ∑≤ÊàêÂäüÂêØÁî® (BBR + TCP Fast Open)${NC}"
    else
      echo -e "${RED}${INDENT}‚ö†Ô∏è ËÆæÁΩÆÂÆåÊàêÔºå‰ΩÜÊú™Ê£ÄÊµãÂà∞ BBR ÂêØÂä®ÔºåÂèØËÉΩÂÜÖÊ†∏‰∏çÊîØÊåÅ (>= 4.9)${NC}"
    fi
  fi
}

# ========== ‰∏ªËèúÂçï ==========
check_bbr
check_ssr_status

echo -e "${CYAN}${INDENT}=============================="
echo -e "${INDENT}üöÄ SSR-Plus ÁÆ°ÁêÜËÑöÊú¨ ${VERSION} üöÄ"
echo -e "${INDENT}==============================${NC}"
echo -e "${GREEN}${INDENT}1) ÂÆâË£Ö SSR${NC}"
echo -e "${GREEN}${INDENT}2) ‰øÆÊîπÈÖçÁΩÆ${NC}"
echo -e "${GREEN}${INDENT}3) Êü•ÁúãÈÖçÁΩÆ${NC}"
echo -e "${GREEN}${INDENT}4) ÂêØÂä® SSR${NC}"
echo -e "${GREEN}${INDENT}5) ÂÅúÊ≠¢ SSR${NC}"
echo -e "${GREEN}${INDENT}6) ÈáçÂêØ SSR${NC}"
echo -e "${YELLOW}${INDENT}7) Âç∏ËΩΩ SSR${NC}"
echo -e "${BLUE}${INDENT}8) ÂêØÁî®Á≥ªÁªüÂä†ÈÄü (BBR + TFO)${NC}"
echo -e "${RED}${INDENT}9) ÈÄÄÂá∫${NC}"
echo -e "${CYAN}${INDENT}==============================${NC}"
echo -e "${INDENT}Á≥ªÁªüÂä†ÈÄüÁä∂ÊÄÅ: ${BBR_STATUS}"
echo -e
